(module jazz.jas jazz
  (import (jazz.io))
  (import (jazz.settings))
  (import (jazz.time))
  (import (jazz.zlib))
  (import (time))
  (definition public (jas-init working))
  (definition public (jas-open working))
  (definition public (jas-config-get repo key))
  (definition public (jas-config-set repo key value))
  (definition public (jas-staging-tree repo))
  (definition public (jas-commit repo author email message tree parent))
  (definition public (jas-discard repo))
  (definition public (jas-restore repo commit))
  (definition public (jas-reset repo commit))
  (definition public (jas-branches repo))
  (definition public (jas-checkout repo name (validate-clean?: validate-clean? (unspecified)) (create?: create? (unspecified))))
  (definition public (jas-read-head repo))
  (definition public (jas-require-head repo))
  (definition public (jas-add repo path))
  (definition public (jas-remove repo path))
  (definition public (jas-head-index repo))
  (definition public (jas-working-index repo))
  (definition public (jas-staging-index repo))
  (definition public (jas-commit-index repo commit))
  (definition public (jas-staging-status repo))
  (definition public (jas-working-status repo))
  (definition public (jas-diff repo from to))
  (definition public (jas-commit? repo ref))
  (definition public (jas-branch? repo ref))
  (definition public (jas-branch-name repo ref))
  (definition public (jas-resolve repo ref))
  (definition public (jas-parse repo rev))
  (definition public (jas-retrieve repo digest))
  (class JAS-Repository extends Object
    (slot working getter generate)
    (slot directory getter generate)
    (slot global-settings getter generate)
    (slot local-settings getter generate)
    (slot disregard getter generate)
    (slot ignore getter generate)
    (slot head getter generate)
    (slot index getter generate)
    (slot objects getter generate)
    (slot heads getter generate)
    (method protected override (initialize working (init?: init? (unspecified))))
    (method protected final (init))
    (method protected final (register-configs))
    (method protected final (config-get key))
    (method protected final (config-set key value))
    (method protected final (objects-file digest))
    (method protected final (write-tree tree))
    (method protected final (write-content content))
    (method protected final (write-file file digest))
    (method protected final (write-blob content digest))
    (method protected final (exists? digest))
    (method protected final (retrieve digest))
    (method protected final (retrieve-file digest file))
    (method protected final (retrieve-blob digest))
    (method protected final (staging-tree))
    (method protected final (commit author email message tree parent))
    (method protected final (commit-tree commit))
    (method protected final (commit-parent commit))
    (method protected final (discard))
    (method protected final (discarding-directories proc))
    (method protected final (restore commit))
    (method protected final (reset commit))
    (method protected final (checkout name (validate-clean?: validate-clean? (unspecified)) (create?: create? (unspecified))))
    (method protected final (checkout-commit commit))
    (method protected final (add path))
    (method protected final (remove path))
    (method protected final (normalize-path path))
    (method protected final (head-index))
    (method protected final (working-index))
    (method protected final (staging-index))
    (method protected final (commit-index commit))
    (method protected final (tree->index tree))
    (method protected final (scan-file path file (base: base (unspecified))))
    (method protected final (scan-directory dirpath dir (base: base (unspecified))))
    (method protected final (scan-tree tree))
    (method protected final (index->tree index))
    (method protected final (diff from to))
    (method protected final (staging-status))
    (method protected final (working-status))
    (method protected final (write-head ref))
    (method protected final (read-head))
    (method protected final (require-head))
    (method protected final (write-branch branch commit))
    (method protected final (read-branch name))
    (method protected final (branch-file name))
    (method protected final (branches-directory))
    (method protected final (branch-exists? name))
    (method protected final (branches))
    (method protected final (commit? ref))
    (method protected final (branch? ref))
    (method protected final (make-branch name))
    (method protected final (branch-name ref))
    (method protected final (resolve ref))
    (method protected final (parse rev)))
  (class JAS-Index extends Object
    (slot repository getter generate)
    (slot directory getter generate)
    (slot file getter generate)
    (slot paths getter generate)
    (slot entries getter generate)
    (method protected override (initialize repository directory (file: file (unspecified)) (entries: entries (unspecified))))
    (method protected override (print output readably))
    (method protected final (setup-paths))
    (method protected final (load))
    (method protected final (save))
    (method protected final (updating path test proc))
    (method protected final (update path test added))
    (method protected final (add-file path file))
    (method protected final (add-directory path directory))
    (method protected final (remove-file path file))
    (method protected final (remove-directory path directory))
    (method protected final (directory-test path))
    (method protected final (find-entry path)))
  (class JAS-Diff extends Object
    (slot changes getter generate)
    (method protected override (initialize changes))
    (method protected override (print output readably)))
  (definition protected (jas-exception format-string . rest))
  (definition protected (jas-exception-no-commits))
  (class JAS-Exception extends Exception
    (slot message)
    (method protected override (initialize message))
    (method protected override (get-message)))
  (definition public (jas-describe obj output)))
